#!/usr/bin/env node

var download = require('download-git-repo')
var program = require('commander')
var fs = require('fs-extra')
var path = require('path')
var ora = require('ora')
var rm = require('rimraf').sync
var chalk = require('chalk')
var home = require('user-home')
var inquirer = require('inquirer')
var logger = require('npmlog')

/**
 *  Usage
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help
 */

program
  .on('--help', () => {
    console.log('  Example:')
    console.log()
    console.log(chalk.gray('  # create a new project with an remote template'))
    console.log('  $ vae init webpack my-project')
    console.log()
  })

/**
 * Help
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help() 
}
help()

/**
 * Settings
 */

var template = program.args[0]
var rawName = program.args[1]
var inPlace = !rawName || rawName === '.'
var clone = program.clone || true
var dirName = inPlace ? path.resolve('.').split(path.sep).pop() : rawName

var projectPath = path.join(process.cwd(), dirName)

/**
 * Padding
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Prompt
 */

function confirm ( message ) {
  return inquirer.prompt([{
    type: 'confirm',
    name: 'ok',
    message
  }])
}

/**
 * Mkdir directory
 */

function mkdir (dirpath) {
  fs.mkdir(projectPath, 484,  err => {
    if (err) logger.error('ERR', err)
  })
}

if (fs.existsSync(projectPath)) {
  confirm('Target directory exists. Continue?')
  .then(function (answers) {
    if (answers.ok) {
      rm(projectPath)
      mkdir(projectPath)
      downloadTemplate(projectPath)
    }
  })
}
else {
  confirm('Generate project in current directory?')
  .then(function (answers) {
    if (answers.ok) {
      mkdir(projectPath)
      downloadTemplate(projectPath)
    }
  })
}

function downloadTemplate (dirpath) {
  var spinner = ora('downloading template ')
  spinner.start()

  // Remove if local template exists
  var temp = path.join(dirpath, template)
  if (fs.existsSync(temp)) rm(temp)
  download('gongph/' + template, dirpath, { clone: clone }, err => {
    spinner.stop()
    if (err) console.log(err)
  })
}